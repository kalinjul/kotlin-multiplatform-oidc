{
  "id": "playground",
  "realm": "playground",
  "displayName": "OIDC SSL Playground",
  "displayNameHtml": "<div class=\"kc-logo-text\"><span>OIDC SSL Playground</span></div>",
  "enabled": true,
  "sslRequired": "external",
  "registrationAllowed": true,
  "registrationEmailAsUsername": false,
  "rememberMe": true,
  "verifyEmail": false,
  "loginWithEmailAllowed": true,
  "duplicateEmailsAllowed": false,
  "resetPasswordAllowed": true,
  "editUsernameAllowed": false,
  "bruteForceProtected": true,
  "permanentLockout": false,
  "maxFailureWaitSeconds": 900,
  "minimumQuickLoginWaitSeconds": 60,
  "waitIncrementSeconds": 60,
  "quickLoginCheckMilliSeconds": 1000,
  "maxDeltaTimeSeconds": 43200,
  "failureFactor": 30,
  "defaultRoles": ["offline_access", "uma_authorization"],
  "requiredCredentials": ["password"],
  "otpPolicyType": "totp",
  "otpPolicyAlgorithm": "HmacSHA1",
  "otpPolicyInitialCounter": 0,
  "otpPolicyDigits": 6,
  "otpPolicyLookAheadWindow": 1,
  "otpPolicyPeriod": 30,
  "browserSecurityHeaders": {
    "contentSecurityPolicyReportOnly": "",
    "xContentTypeOptions": "nosniff",
    "xRobotsTag": "none",
    "xFrameOptions": "SAMEORIGIN",
    "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
    "xXSSProtection": "1; mode=block",
    "strictTransportSecurity": "max-age=31536000; includeSubDomains"
  },
  "smtpServer": {},
  "eventsEnabled": true,
  "eventsListeners": ["jboss-logging"],
  "enabledEventTypes": [
    "SEND_RESET_PASSWORD",
    "UPDATE_CONSENT_ERROR",
    "GRANT_CONSENT",
    "REMOVE_TOTP",
    "REVOKE_GRANT",
    "LOGIN_ERROR",
    "CLIENT_LOGIN",
    "RESET_PASSWORD_ERROR",
    "IMPERSONATE_ERROR",
    "CODE_TO_TOKEN_ERROR",
    "CUSTOM_REQUIRED_ACTION",
    "OAUTH2_DEVICE_CODE_TO_TOKEN_ERROR",
    "RESTART_AUTHENTICATION",
    "UPDATE_PROFILE_ERROR",
    "IMPERSONATE",
    "LOGIN",
    "UPDATE_PASSWORD_ERROR",
    "OAUTH2_DEVICE_VERIFY_USER_CODE",
    "CLIENT_INITIATED_ACCOUNT_LINKING",
    "TOKEN_EXCHANGE",
    "REGISTER",
    "LOGOUT",
    "DELETE_ACCOUNT_ERROR",
    "AUTHREQID_TO_TOKEN",
    "CLIENT_REGISTER",
    "IDENTITY_PROVIDER_LINK_ACCOUNT",
    "UPDATE_PASSWORD",
    "DELETE_ACCOUNT",
    "FEDERATED_IDENTITY_LINK_ERROR",
    "CLIENT_DELETE",
    "IDENTITY_PROVIDER_FIRST_LOGIN",
    "VERIFY_EMAIL",
    "CLIENT_DELETE_ERROR",
    "CLIENT_LOGIN_ERROR",
    "RESTART_AUTHENTICATION_ERROR",
    "EXECUTE_ACTIONS",
    "REMOVE_FEDERATED_IDENTITY_ERROR",
    "TOKEN_EXCHANGE_ERROR",
    "PERMISSION_TOKEN",
    "SEND_IDENTITY_PROVIDER_LINK_ERROR",
    "EXECUTE_ACTION_TOKEN_ERROR",
    "SEND_VERIFY_EMAIL",
    "OAUTH2_DEVICE_AUTH",
    "EXECUTE_ACTIONS_ERROR",
    "REMOVE_FEDERATED_IDENTITY",
    "OAUTH2_DEVICE_CODE_TO_TOKEN",
    "IDENTITY_PROVIDER_POST_LOGIN",
    "IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR",
    "UPDATE_EMAIL",
    "REGISTER_ERROR",
    "REVOKE_GRANT_ERROR",
    "EXECUTE_ACTION_TOKEN",
    "LOGOUT_ERROR",
    "UPDATE_EMAIL_ERROR",
    "CLIENT_UPDATE_ERROR",
    "UPDATE_PROFILE",
    "AUTHREQID_TO_TOKEN_ERROR",
    "FEDERATED_IDENTITY_LINK",
    "CLIENT_REGISTER_ERROR",
    "SEND_VERIFY_EMAIL_ERROR",
    "SEND_IDENTITY_PROVIDER_LINK",
    "RESET_PASSWORD",
    "CLIENT_INITIATED_ACCOUNT_LINKING_ERROR",
    "OAUTH2_DEVICE_VERIFY_USER_CODE_ERROR",
    "UPDATE_CONSENT",
    "REMOVE_TOTP_ERROR",
    "VERIFY_EMAIL_ERROR",
    "SEND_RESET_PASSWORD_ERROR",
    "CLIENT_UPDATE",
    "IDENTITY_PROVIDER_POST_LOGIN_ERROR",
    "CUSTOM_REQUIRED_ACTION_ERROR",
    "UPDATE_TOTP",
    "CODE_TO_TOKEN",
    "OAUTH2_DEVICE_AUTH_ERROR",
    "GRANT_CONSENT_ERROR",
    "IDENTITY_PROVIDER_FIRST_LOGIN_ERROR",
    "UPDATE_TOTP_ERROR"
  ],
  "adminEventsEnabled": true,
  "adminEventsDetailsEnabled": true,
  "clients": [
    {
      "id": "basic-client",
      "clientId": "basic-client",
      "name": "Basic SSL Client",
      "description": "Basic OAuth client for SSL demonstration",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "basic-client-secret",
      "redirectUris": [
        "http://localhost:8080/redirect",
        "https://localhost:8443/redirect"
      ],
      "webOrigins": [
        "http://localhost:8080",
        "https://localhost:8443"
      ],
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": true,
      "serviceAccountsEnabled": false,
      "publicClient": false,
      "frontchannelLogout": true,
      "protocol": "openid-connect",
      "attributes": {
        "saml.assertion.signature": "false",
        "saml.force.post.binding": "false",
        "saml.multivalued.roles": "false",
        "saml.encrypt": "false",
        "oauth2.device.authorization.grant.enabled": "false",
        "backchannel.logout.revoke.offline.tokens": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "exclude.session.state.from.auth.response": "false",
        "oidc.ciba.grant.enabled": "false",
        "backchannel.logout.session.required": "true",
        "client_credentials.use_refresh_token": "false",
        "saml_force_name_id_format": "false",
        "tls.client.certificate.bound.access.tokens": "false",
        "require.pushed.authorization.requests": "false",
        "saml.client.signature": "false",
        "saml.allow.ecp.flow": "false",
        "id.token.as.detached.signature": "false",
        "saml.assertion.signature.response": "false",
        "saml.response.signature": "false",
        "saml.artifact.binding": "false",
        "acr.loa.map": "{}",
        "saml.authnstatement": "false",
        "display.on.consent.screen": "false",
        "saml.onetimeuse.condition": "false"
      },
      "defaultClientScopes": [
        "web-origins",
        "openid",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "mtls-client",
      "clientId": "mtls-client",
      "name": "Mutual TLS Client",
      "description": "Client configured for mutual TLS authentication",
      "enabled": true,
      "clientAuthenticatorType": "client-x509",
      "redirectUris": [
        "https://localhost:8443/redirect"
      ],
      "webOrigins": [
        "https://localhost:8443"
      ],
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": true,
      "serviceAccountsEnabled": false,
      "publicClient": false,
      "frontchannelLogout": true,
      "protocol": "openid-connect",
      "attributes": {
        "tls.client.certificate.bound.access.tokens": "true",
        "x509.subject.regexp": "CN=(.*?)(?:,|$)",
        "x509.allow.regex.pattern.comparison": "true"
      },
      "defaultClientScopes": [
        "web-origins",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "dev-client",
      "clientId": "dev-client",
      "name": "Development Client",
      "description": "Development client with relaxed SSL requirements",
      "enabled": true,
      "clientAuthenticatorType": "client-secret",
      "secret": "dev-client-secret",
      "redirectUris": [
        "http://localhost:8080/*",
        "https://localhost:8443/*",
        "http://localhost:*",
        "https://localhost:*"
      ],
      "webOrigins": [
        "*"
      ],
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": true,
      "serviceAccountsEnabled": false,
      "publicClient": false,
      "frontchannelLogout": true,
      "protocol": "openid-connect",
      "attributes": {
        "exclude.session.state.from.auth.response": "false",
        "display.on.consent.screen": "false"
      },
      "defaultClientScopes": [
        "web-origins",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    }
  ],
  "users": [
    {
      "id": "demo-user",
      "username": "demo",
      "enabled": true,
      "totp": false,
      "emailVerified": true,
      "firstName": "Demo",
      "lastName": "User",
      "email": "demo@example.com",
      "credentials": [
        {
          "type": "password",
          "value": "demo",
          "temporary": false
        }
      ],
      "realmRoles": ["user"],
      "clientRoles": {},
      "groups": []
    },
    {
      "id": "ssl-user",
      "username": "ssluser",
      "enabled": true,
      "totp": false,
      "emailVerified": true,
      "firstName": "SSL",
      "lastName": "User",
      "email": "ssl@example.com",
      "credentials": [
        {
          "type": "password",
          "value": "sslpassword",
          "temporary": false
        }
      ],
      "realmRoles": ["user"],
      "clientRoles": {},
      "groups": []
    }
  ],
  "roles": {
    "realm": [
      {
        "id": "user",
        "name": "user",
        "description": "Standard user role",
        "composite": false,
        "clientRole": false,
        "containerId": "playground"
      },
      {
        "id": "admin",
        "name": "admin",
        "description": "Administrator role",
        "composite": false,
        "clientRole": false,
        "containerId": "playground"
      }
    ]
  },
  "groups": [],
  "defaultRoles": ["offline_access", "uma_authorization", "user"],
  "clientScopes": [
    {
      "id": "ssl-demo-scope",
      "name": "ssl-demo",
      "description": "SSL Demo Scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "true",
        "consent.screen.text": "SSL demonstration scope"
      },
      "protocolMappers": [
        {
          "id": "ssl-demo-mapper",
          "name": "ssl-demo",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-hardcoded-claim-mapper",
          "consentRequired": false,
          "config": {
            "claim.value": "ssl-demo",
            "userinfo.token.claim": "true",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "ssl_demo",
            "jsonType.label": "String"
          }
        }
      ]
    },
    {
      "id": "openid-scope",
      "name": "openid",
      "description": "OpenID Connect scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "false"
      },
      "protocolMappers": []
    },
    {
      "id": "profile-scope", 
      "name": "profile",
      "description": "Profile scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "true",
        "consent.screen.text": "Profile information"
      },
      "protocolMappers": [
        {
          "id": "profile-mapper",
          "name": "profile",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "profile",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "profile",
            "jsonType.label": "String"
          }
        }
      ]
    },
    {
      "id": "email-scope",
      "name": "email", 
      "description": "Email scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "true",
        "consent.screen.text": "Email address"
      },
      "protocolMappers": [
        {
          "id": "email-mapper",
          "name": "email",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "email",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "email",
            "jsonType.label": "String"
          }
        }
      ]
    },
    {
      "id": "web-origins-scope",
      "name": "web-origins",
      "description": "Web Origins scope",
      "protocol": "openid-connect", 
      "attributes": {
        "include.in.token.scope": "false",
        "display.on.consent.screen": "false"
      },
      "protocolMappers": []
    },
    {
      "id": "roles-scope",
      "name": "roles",
      "description": "Roles scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "false",
        "display.on.consent.screen": "false"
      },
      "protocolMappers": []
    },
    {
      "id": "address-scope",
      "name": "address",
      "description": "Address scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "true",
        "consent.screen.text": "Address information"
      },
      "protocolMappers": []
    },
    {
      "id": "phone-scope",
      "name": "phone", 
      "description": "Phone scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "true",
        "consent.screen.text": "Phone number"
      },
      "protocolMappers": []
    },
    {
      "id": "offline-access-scope",
      "name": "offline_access",
      "description": "Offline access scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "true",
        "consent.screen.text": "Offline access"
      },
      "protocolMappers": []
    },
    {
      "id": "microprofile-jwt-scope",
      "name": "microprofile-jwt",
      "description": "Microprofile JWT scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "false"
      },
      "protocolMappers": []
    }
  ]
}